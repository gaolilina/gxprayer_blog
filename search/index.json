[{"content":"","date":"2024-11-04T00:00:00Z","permalink":"https://example.com/p/%E5%A2%9E%E9%87%8F%E5%AD%A6%E4%B9%A0/","title":"增量学习"},{"content":"简介 持续集成 (CI) 是一种需要频繁提交代码到共享仓库的软件实践。可以包括代码语法检查（检查样式格式）、安全性检查、代码覆盖率、功能测试及其他自定义操作。\nGitHub Actions 是 GitHub 的持续集成服务，每一步操作是一个单独的action（可以认为是一个脚本），将action进行组合，构建自己的发布工作流。工作流程可在 GitHub 托管的虚拟机或您自行托管的机器上运行。\n公共存储库中标准 GitHub 托管的运行器和自托管运行器可免费使用 GitHub Actions。 对于专用存储库，每个 GitHub 帐户可获得一定数量的免费时间和存储以用于 GitHub 托管的运行器，具体取决于帐户的计划。 超出包含数量的任何使用量都由支出限制控制。\n基本概念 workflow （工作流程）：持续集成一次运行的过程，就是一个 workflow。\njob （任务）：一个 workflow 由一个或多个 jobs 构成，含义是一次持续集成的运行，可以完成多个任务。\nstep（步骤）：每个 job 由多个 step 构成，一步步完成。\naction （动作）：每个 step 可以依次执行一个或多个命令（action）。\nworkflow（工作流配置）：GitHub Actions 的配置文件叫做 workflow 文件，存放在代码仓库的.github/workflows目录，采用yml格式编写，一个库可以有多个 workflow 文件。GitHub 只要发现.github/workflows目录里面有.yml文件，就会自动运行该文件。\n配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 # 工作流名称 name: GitHub Pages # 触发时机：定时，手动，指定操作等，可参考https://docs.github.com/zh/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows # on字段也可以是事件的数组。 [push, pull_request] on: push: branches: - main # Set a branch to deploy pull_request: # 要执行的任务 jobs: my-job: # 任务的`job_id`，具体名称自定义。 name: My Job # 自定义名称 runs-on: ubuntu-latest # 所需要的虚拟机环境。它是必填字段 steps: # 指定每个 Job 的运行步骤，可以包含一个或多个步骤 - name: Print a greeting # 步骤名称。 # 使用 `concurrency` 以确保只有使用相同并发组的单一作业或工作流才会同时运行。 并发组可以是任何字符串或表达式。 concurrency: group: ${{ github.workflow }}-${{ github.ref }} env: # 环境变量， MY_VAR: Hi there! My name is FIRST_NAME: Mona if: ${{ github.ref == \u0026#39;refs/heads/main\u0026#39; }} # 除非满足条件，否则不运行。 #输入给action的参数。 每个输入参数都是一个键/值对。 输入参数被设置为环境变量。 with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_dir: ./public run: | echo $MY_VAR $FIRST_NAME $MIDDLE_NAME $LAST_NAME. job2: needs: my-job # 依赖关系 job3: needs: [job1, job2] 常用action checkout 常见问题 push 代码403，权限被拒，需要在settings里为action开放写权限。 ","date":"2024-01-11T00:00:00Z","permalink":"https://example.com/p/github-action/","title":"github action"},{"content":"一、定义 加密货币：\n使用加密技术来保护交易的虚拟货币。它没有中央发行或监管机构，而是使用去中心化系统来记录交易并发行新货币。 加密货币运行在称为区块链的分布式公共分类账上，这是货币持有者更新和持有的所有交易的记录。 拥有加密货币，不会拥有任何有形的东西，而是有一个密钥，它允许在没有受信任的第三方的情况下，将记录或度量货币从一个人移动到另一个人。 区块链\n区块链技术源于比特币，其本质是一个不断增长的全网总账本，它是由多个区块构成的有序链表，每一个区块都记录了一系列交易（第一个记录通常为矿工奖励），并且，每个区块都指向前一个区块，从而形成一个链条。 每个区块都有一个唯一的哈希标识，被称为区块哈希，同时，区块通过记录上一个区块的哈希来指向上一个区块，每一个区块还有一个Merkle哈希用来确保该区块的所有交易记录无法被篡改。 网络中每个完全节点都拥有完整的区块链数据。并且，节点总是信任最长的区块链，伪造区块链需要拥有超过51%的全网算力。 挖矿\n以太坊 1.\n二、演变 三、比特币交易 比特币的交易是一种无需信任中介参与的P2P（Peer-to-peer）交易。交易记录的是双方的公钥地址。 比特币实际的交易记录是由一系列交易构成，每一个交易都包含一个或多个输入，以及一个或多个输出。比特币协议规定一个输出必须一次性花完，一次 私钥本质是256位随机整数，以16进制表示共64字符，32字节，对私钥进行Base58编码，得到私钥地址，又称为钱包导入格式：WIF。 公钥根据私钥计算得出，不能根据公钥逆向计算私钥。比特币的地址并不是公钥，而是公钥的哈希。即从公钥能推导出地址，但从地址不能反推公钥。 交易过程使用。 比特币钱包用于发送和接收比特币，其实际上是帮助用户管理私钥的软件。用户可以生成任意数量的密钥对，公钥是接收别人转账的地址，私钥是花费比特币唯一手段。 和银行账户不同，比特币网络没有账户的概念，任何人都可以从区块链查询到任意公钥对应的比特币余额，但不知道这些公钥由谁持有的，也无法根据用户查询比特币余额。 使用 注意事项 ","date":"2024-01-11T00:00:00Z","permalink":"https://example.com/p/%E5%8A%A0%E5%AF%86%E8%B4%A7%E5%B8%81/","title":"加密货币"}]